#!/usr/bin/env python

import sys, os, re

cpu_tag="avg-cpu"
disk_tag="Device"

pflag = len(sys.argv)>2 and sys.argv[2]

def calc(file):
	with open(file, 'r') as f:
		line = f.readline()
		flag=False
		disk_header=""
		cpu_header=""
		dlist=[]
		clist=[]
		dcount=0
		ccount=0
		while True:
			line = f.readline()
			if not line: break
			if not flag:
				if re.match(cpu_tag, line):
					cpu_header=line.split()[1:]
				elif re.match(disk_tag, line):
					disk_header=line.split()[1:]
					flag=True
					f.seek(0)
			elif re.match(cpu_tag, line):
				line=f.readline()
				ccount = ccount+1
				if not line: break
				lst=re.findall(r'\b[\d\.]+\b', line)
				if lst:
					if pflag: print '\t'.join([str(ccount)]+lst),
					lst=map(float, lst)
					if not clist:
						clist=lst
					else:
						clist=map(lambda x,y:x+y, lst, clist)
			elif re.match(disk_tag, line):
				line=f.readline()
				dcount = dcount+1
				if not line: break
				lst=re.findall(r'\b[\d\.]+\b', line)
				if lst:
					if pflag: print '\t'.join(lst)
					lst=map(float, lst)
					if not dlist:
						dlist=lst
					else:
						dlist=map(lambda x,y:x+y, lst, dlist)

		round2=lambda x: round(x,2)
		disk_header=map(lambda x: str(x).split('-')[0], disk_header)

		print('\t'.join(map(str, cpu_header)))
		print('\t'.join(map(str, map(round2, map(lambda x: x/ccount, clist)))))
		print('\t'.join(map(str,disk_header)))
		print('\t'.join(map(str, map(round2, map(lambda x: x/dcount, dlist)))))


if __name__ == '__main__':
	file=sys.argv[1]
	if not file or not os.path.isfile(file):
		print("Not input file name or file not exists");
		exit(1)
	calc(file)
